{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Girija Sh. Mohanta\\\\Desktop\\\\Pocket Saving\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\"; // Import BrowserRouter\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Home from \"./Components/Home\";\nimport Login from \"./Components/Login\";\nimport Signup from \"./Components/Signup\";\nimport Alllist from \"./Components/Alllist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // Check if user is logged in (you may implement this logic based on your authentication system)\n    const userLoggedIn = checkIfUserIsLoggedIn(); // Replace with your authentication logic\n    setIsLoggedIn(userLoggedIn);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [isLoggedIn && /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          element: /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/home\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/alllist\",\n          element: /*#__PURE__*/_jsxDEV(Alllist, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      theme: \"dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to check if user is logged in (replace with your authentication logic)\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = App;\nfunction checkIfUserIsLoggedIn() {\n  const token = localStorage.getItem(\"token\");\n  return !!token; // Return true if token exists, otherwise false\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Routes","Route","Navigate","ToastContainer","Home","Login","Signup","Alllist","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","userLoggedIn","checkIfUserIsLoggedIn","children","className","to","fileName","_jsxFileName","lineNumber","columnNumber","path","element","theme","_c","token","localStorage","getItem","$RefreshReg$"],"sources":["C:/Users/Girija Sh. Mohanta/Desktop/Pocket Saving/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\"; // Import BrowserRouter\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Home from \"./Components/Home\";\nimport Login from \"./Components/Login\";\nimport Signup from \"./Components/Signup\";\nimport Alllist from \"./Components/Alllist\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    // Check if user is logged in (you may implement this logic based on your authentication system)\n    const userLoggedIn = checkIfUserIsLoggedIn(); // Replace with your authentication logic\n    setIsLoggedIn(userLoggedIn);\n  }, []);\n\n  return (\n    <BrowserRouter> {/* Use BrowserRouter here */}\n      <div className=\"App\">\n        <Routes>\n          {/* Redirect to home page if user is logged in */}\n          {isLoggedIn && <Navigate to=\"/home\" />}\n          {/* Otherwise, show signup and login routes */}\n          <Route path=\"/signup\" element={<Signup />} />\n          <Route path=\"/login\" element={<Login />} />\n          {/* Show home page and other routes */}\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/alllist\" element={<Alllist />} />\n        </Routes>\n      </div>\n      <ToastContainer theme=\"dark\" />\n    </BrowserRouter>\n  );\n}\n\n// Function to check if user is logged in (replace with your authentication logic)\nfunction checkIfUserIsLoggedIn() {\n  const token = localStorage.getItem(\"token\");\n  return !!token; // Return true if token exists, otherwise false\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}